---
filters:
  - shinylive
---

```{r}
#| label: setup-common-models
#| include: false
source("includes/common.R")
```

```{r}
#| label: setup-02
#| include: false
if (!identical(Sys.getenv("emlwr.eval_fits"), "true")) {
  eval_fits <- FALSE
} else {
  eval_fits <- TRUE
}
```

# Models {#sec-models}

## Benchmarks

The following is a shiny app based on experimental benchmarks. For a given selection of model configurations, the app displays the time to resample various model configurations across a given number of rows of training data.

```{r}
#| label: load-shinylive
#| include: false
library(shiny)
library(bslib)
library(shinylive)
```

<!--# Going to take some work for this not to feel super rote.  -->

<!--# I do want some kind of content that's, like, tables of timings for every ___ engine fitted on a bunch of numbers of rows.  -->

```{shinylive-r}
#| label: models-app
#| standalone: true
#| viewerHeight: 400
#| eval: true
#| echo: false
#| file: "data/models/app/app.R"
```

```{r}
#| include: false
bm <- qs::qread("data/models/app/bm.rds")

min_nrow <- min(bm$n_rows, na.rm = TRUE)
```

This app allows for quickly juxtaposing the time that it might take to evaluate performance across various modeling approaches.

### One data point

When the app first starts, the left-most point labeled `boost_tree (lightgbm)` is the observed time to sequentially evaluate an initial set of 10 models across 10 cross-validation folds of an `r min_nrow` row training set, resulting in 100 model fits on 900 rows, 100 sets of predictions of 100 rows, and metric calculations on each set of predictions. The actual benchmarking code is a bit more involved, but the code underlying that single data point looks something like the following.

First, we load core packages as well as the bonsai parsnip extension (for lightgbm support):

```{r}
library(tidymodels)
library(bonsai)
```

Next, we'll simulate a dataset with 1000 rows using `simulate_regression()`, *Efficient Machine Learning with R*'s in-house simulation function:

```{r}
d <- simulate_regression(1000)
d
```

This step would happen as-is for every regression task on 1000 rows.

Now, splitting the data into 10 folds using cross-validation:

```{r}
d_folds <- vfold_cv(d, v = 10)
d_folds
```

Now, we specify a boosted tree model specification using the LightGBM engine. In this experiment, any tunable parameter (defined by whether tidymodels has a parameter definition that automatically kicks in when generating grids) is set to be tuned.

```{r}
spec <- 
  boost_tree(
    tree_depth = tune(),
    trees = tune(),
    learn_rate = tune(),
    mtry = tune(),
    min_n = tune(),
    loss_reduction = tune(),
    sample_size = tune(),
    stop_iter = tune()
  ) %>%
  set_engine("lightgbm") %>%
  set_mode("regression")
```

Each of these model fits are carried out with minimal preprocessors based on *Tidy Modeling with R's* "Recommended Preprocessing" appendix [@kuhn2022]. In this case, Kuhn and Silge recommend that users impute missing values for both numeric predictors (we do so using the median for all) and categorical predictors (we do so using the mode).

```{r}
rec <- 
  recipe(outcome ~ ., d) %>%
  step_impute_median(all_numeric_predictors()) %>%
  step_impute_mode(all_nominal_predictors())
```

With our data resampled and a modeling workflow defined, we're ready to resample this model. The resampling process will propose 10 different possible sets of parameter values for each parameter tagged with `tune()`. This will happen automatically under the hood of `tune_grid()`, but we can replicate this ourselves using dials:

```{r}
#| label: print-example-grid
extract_parameter_set_dials(spec) %>% 
  finalize(d) %>%
  grid_space_filling(size = 10)
```

`tune_grid()` will evaluate those sets of values by fitting them to 10 different subsets of `d`.

```{r}
#| eval: false
set.seed(1)
res <- tune_grid(workflow(rec, spec), d_folds)
```

The point in the above plot is the time that those 100 model fits took altogether; in other words, the time that we'd wait for `tune_grid()` to evaluate.

### Why not just model fits?

This seems a bit involved for the purposes of getting a rough sense of how long a given model may take to fit; why don't we just use default parameter values from tidymodels and pass the model specification straight to `fit()`?

There are a few reasons for this. In general, though, resampling a model specification across an initial set of possible parameter values is a fundamental unit of interactive machine learning. This initial resampling process gives the practitioner a sense for the ballpark of predictive performance she can expect for a given model task and how various parameter values may affect that performance. Does a higher `learn_rate` result in better predictive performance? How many `trees` is enough? A single model fit leaves the answer to all of these questions unknown.

Importantly, too, the time that a given model specification takes to fit can vary greatly depending on parameter values. For example, only exploring the time to `fit()` rather than resample across a set of values would obscure the difference in these two elapsed times:

```{r}
#| label: bm-trees
#| include: false
if (eval_fits) {
  bm_trees <-
    bench::mark(
      few_trees = fit(spec %>% set_args(trees = 10), outcome ~ ., d),
      many_trees = fit(spec %>% set_args(trees = 1000), outcome ~ ., d),
      check = FALSE
    )
  qsave(bm_trees, file = "data/models/bm_trees.rds")
} else {
  bm_trees <- qread("data/models/bm_trees.rds")
}
```

```{r}
#| eval: false
#| label: fit-boost-trees
spec <- boost_tree(mode = "regression", engine = "lightgbm")

bench::mark(
  few_trees = fit(spec %>% set_args(trees = 10), outcome ~ ., d),
  many_trees = fit(spec %>% set_args(trees = 1000), outcome ~ ., d),
  check = FALSE
)
```

```{r}
#| label: print-boost-trees
#| echo: false
bm_trees
```

By summing across many model fits that result in varied fit times, we can get a better sense for a typical time to fit across typical parameter values.

<!--# TODO: is an app that explores variations in fit times within a resampling process worth looking into? -->

<!--# TODO: next bit is just a guided analysis of the data. this will live in both the web and print version of the book, but the book will need its own initial view of the data. -->

<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>

## Tidymodels overhead

<!--# TODO: currently this talks about the difference between CRAN and dev (at the time) packages. rephrase to just focus on the now. -->

\
<!--# also, need to rewrite to fit when `eval_fits` and not otherwise. -->

```{r}
#| label: setup-common-02
#| include: false
source("includes/common.R")
```

```{r}
#| label: setup-02-tbd
#| include: false
if (!identical(Sys.getenv("emlwr.eval_fits"), "true")) {
  eval_fits <- FALSE
} else {
  eval_fits <- TRUE
}

if (!eval_fits) {
  data_files <- list.files("data/models", full.names = TRUE)
  data_files <- data_files[grepl("\\.Rda", data_files)]
  loaded <- lapply(data_files, load)
}
```

While the tidymodels team develops the infrastructure that users interact with directly, under the hood, we send calls out to other people's modeling packages—or modeling *engines*—that provide the actual implementations that estimate parameters, generate predictions, etc. The process looks something like this:

![A graphic representing the tidymodels interface. In order, step 1 "translate", step 2 "call", and step 3 "translate", outline the process of translating from the standardized tidymodels interface to an engine's specific interface, calling the modeling engine, and translating back to the standardized tidymodels interface. Step 1 and step 3 are in green, while step 2 is in orange.](figures/translate_diagram.png)

When thinking about the time allotted to each of the three steps above, we refer to the "translate" steps in green as the *tidymodels overhead*. The time it takes to "translate" interfaces in steps **1)** and **3)** is within our control, while the time the modeling engine takes to do it's thing in step **2)** is not.

Let's demonstrate with an example classification problem. Generating some random data:

```{r}
#| label: simulate-data
set.seed(1)
d <- simulate_classification(n_rows = 100)

d
```

...we'd like to model the `class` using the remainder of the variables in this dataset using a logistic regression. We can using the following code to do so:

```{r}
#| label: fit-glm
fit(logistic_reg(), class ~ ., d)
```

The default engine for a logistic regression in tidymodels is `stats::glm()`. So, in the style of the above graphic, this code:

1)  Translates the tidymodels code, which is consistent across engines, to the format that is specific to the chosen engine. In this case, there's not a whole lot to do: it passes the preprocessor as `formula`, the data as `data`, and picks a `family` of `stats::binomial`.
2)  Calls `stats::glm()` and collects its output.
3)  Translates the output of `stats::glm()` back into a standardized model fit object.

Again, we can control what happens in steps **1)** and **3)**, but step **2)** belongs to the `stats` package.

The time that steps **1)** and **3)** take is relatively independent of the dimensionality of the training data. That is, regardless of whether we train on one hundred or a million data points, *our* code (as in, the translation) takes about the same time to run. Regardless of training set size, our code pushes around small, relational data structures to determine how to correctly interface with a given engine. The time it takes to run step **2)**, though, depends almost completely on the size of the data. Depending on the modeling engine, modeling 10 times as much data could result in step **2)** taking twice as long, or 10x as long, or 100x as long as the original fit.

So, while the *absolute* time allotted to steps **1)** and **3)** is fixed, the *portion* of total time to fit a model with tidymodels that is "overhead" depends on how quick the engine code itself is. How quick is a logistic regression with `glm()` on 100 data points?

```{r}
#| label: bench-mark-glm
bench::mark(
  fit = glm(class ~ ., family = binomial, data = d)
) %>% 
  select(expression, median)
```

About a millisecond. That means that, if the tidymodels overhead is one second, we've made this model fit a thousand times slower!

In practice, the overhead here has hovered around a millisecond or two for the last couple years, and machine learning practitioners usually fit much more computationally expensive models than a logistic regression on 100 data points. You'll just have to believe me on that second point. Regarding the first:

```{r}
bm_logistic_reg <- 
  bench::mark(
    parsnip = fit(logistic_reg(), class ~ ., d),
    stats = glm(class ~ ., family = binomial, data = d),
    check = FALSE
  )
```

Remember that the first expression calls the second one, so the increase in time from the second to the first is the "overhead." In this case, it's `r as.numeric(bm_logistic_reg$median[1] - bm_logistic_reg$median[2]) * 1000` milliseconds, or `r round(1 - as.numeric(bm_logistic_reg$median[2] / bm_logistic_reg$median[1]), 3) * 100`% of the total elapsed time.

So, to fit a boosted tree model on 1,000,000 data points, step **2)** might take a few seconds. Steps **1)** and **3)** don't care about the size of the data, so they still take a few thousandths of a second. No biggie—the overhead is negligible. Let's quickly back that up by fitting boosted tree models on simulated datasets of varying sizes, once with the XGBoost interface and once with parsnip's wrapper around it.

```{r}
#| echo: false
#| eval: !expr eval_fits
# default xgboost params from parsnip
params <- list(eta = 0.3, max_depth = 6, gamma = 0, colsample_bytree = 1, 
    colsample_bynode = 1, min_child_weight = 1, subsample = 1)

bm_boost_tree <- 
  bench::press(
    rows = 10^(2:6),
    {
      set.seed(1)
      d <- simulate_classification(rows)
      bt <- boost_tree(mode = "classification")
      bench::mark(
        parsnip = fit(bt, class ~ ., d),
        xgboost = {
          d_mtrx <- model.matrix(class ~ ., d)
          d_xgb <- parsnip:::as_xgb_data(d_mtrx, d[[1]])
          xgboost::xgb.train(params, data = d_xgb$data, nrounds = 15)
        },
        check = FALSE
      )
    }
  )
```

```{r}
#| label: save-bench-press-boost-ree
#| include: false
if (eval_fits) {
  press_boost_tree <- trim_bench_mark(press_boost_tree)
  qsave(press_boost_tree, file = "data/models/press_boost_tree.rds")
} else {
  press_boost_tree <- qread(file = "data/models/press_boost_tree.rds")
}
```

```{r}
#| echo: false
#| label: "plot-press-boost-tree"
#| fig-cap: "TODO: write caption"
press_boost_tree %>%
  mutate(expression = as.character(expression)) %>%
  ggplot() +
  aes(x = rows, y = median, color = expression, group = expression) +
  scale_x_log10() +
  geom_line() +
  labs(x = "Number of Rows", y = "Elapsed Time")
```

This graph shows the gist of tidymodels' overhead for modeling engines: as dataset size and model complexity grow larger, model fitting and prediction take up increasingly large proportions of the total evaluation time.

@sec-speedy-go showed a number of ways users can cut down on the evaluation time of their tidymodels code. Making use of parallelism, reducing the total number of model fits needed to search a given grid, and carefully constructing that grid to search over are all major parts of the story
